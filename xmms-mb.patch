--- xmms-1.2.4/xmms/playlist_list.c.mb	Thu Feb 22 16:40:47 2001
+++ xmms-1.2.4/xmms/playlist_list.c	Thu Feb 22 16:49:08 2001
@@ -236,10 +236,39 @@
 
 #ifdef HAVE_WCHAR_H
 
+static GdkWChar * find_in_wstr(GdkWChar *haystack, char * needle)
+{
+	/* This will only work if needle is 7bit ASCII characters only */
+	GdkWChar *tmp = haystack;
+	int i = 0;
+
+	if (haystack == NULL)
+		return NULL;
+
+	if (needle == NULL || *needle == '\0')
+		return haystack;
+
+	for (; *tmp != L'\0'; tmp++)
+	{
+		if (*tmp == needle[i])
+		{
+			if (needle[i + 1] == '\0')
+				return (tmp - i);
+			i++;
+		}
+		else if (i > 0)
+		{
+			tmp -= i;
+			i = 0;
+		}
+	}
+	return NULL;
+}
+
+
 void playlist_list_draw_string_wc(PlayList_List *pl, GdkFont *font, gint line, gint width, gchar *text)
 {
-	wchar_t *wtext, *wtmp;
-	GdkWChar *gwtext;
+	GdkWChar *wtext;
 	int len, newlen;
 	/*
 	 * Convert the string to a wide character string to avoid
@@ -250,59 +279,41 @@
 	 * Allocate some extra space, we might extend it by one
 	 * character below
 	 */
-	wtext = g_malloc((strlen(text) + 3)
-			 * sizeof(wchar_t));
-	len = mbstowcs(wtext, text, strlen(text) + 1);
+	wtext = g_malloc((strlen(text) + 3) * sizeof(GdkWChar));
+	len = gdk_mbstowcs(wtext,text, strlen(text) + 1);
 	if (len == -1)
 	{
-		char *tmp;
-		g_message("mbstowcs() failed. (string: %s)", text);
-		for (tmp = text; *tmp; *(tmp++) &= 0x7F);
-		mbstowcs(wtext, text, strlen(text) + 1);
+		/* Conversion failed */
+		for (len = 0; text[len] != '\0'; len++)
+		  wtext[len] = text[len];
 	}
-	else
-		wtext[len] = L'\0';
+	wtext[len] = L'\0';
 	if (cfg.convert_underscore)
-		while ((wtmp = wcschr(wtext, L'_')) != NULL)
-			*wtmp = L' ';
-	if (cfg.convert_twenty)
-		while ((wtmp = wcsstr(wtext, L"%20")) != NULL)
+	{
+		int i;
+		for (i = 0; i < len; i++)
+		  if (wtext[i] == L'_')
+		    wtext[i] = L' ';
+	}
+	if (cfg.convert_twenty && len > 2)
+	{
+		GdkWChar *wtmp;
+		while ((wtmp = find_in_wstr(wtext, "%20")) != NULL)
 		{
-			wchar_t *wtmp2 = wtmp + 3;
+			GdkWChar *wtmp2 = wtmp + 3;
 			*(wtmp++) = L' ';
 			while (*wtmp2)
 				*(wtmp++) = *(wtmp2++);
 			*wtmp = L'\0';
+			len -= 2;
 		}
 	len = wcslen(wtext);
 
-	/*
-	 * Convert the wide string to a GdkWChar string that someone,
-	 * for some unknown reason has desided to make uncompatible
-	 * with wchar_t strings.
-	 */
-	if (sizeof(wchar_t) != sizeof(GdkWChar))
-	{
-		int i;
-
-		gwtext = g_malloc((len + 3) * sizeof(GdkWChar));
-		for (i = 0; i <= len; i++)
-			gwtext[i] = wtext[i];
-		g_free(wtext);
 	}
-	else
-		gwtext = (GdkWChar*) wtext;
 	
 	newlen = len + 2;
 	
-#if 0
-	while (gdk_text_width_wc(font, gwtext, len) > width && len > 4)
-	{
-#else
-	/* fixed by Hiroshi Takekawa <sian@big.or.jp> */
-	{
-	gint lb, rb, w, as, de;
-	while ((gdk_text_extents_wc(font, gwtext, len, &lb, &rb, &w, &as, &de), w > width) && len > 4)
+	while (gdk_text_width_wc(font, text, len) > width && len > 4)
 	{
 		/*
 		 * First check if the string gets short enough by
@@ -311,16 +322,17 @@
 		 * remove charaters, one by one.
 		 */
 		len = newlen--;
-		gwtext[len - 3] = L'.';
-		gwtext[len - 2] = L'.';
-		gwtext[len - 1] = L'.';
-		gwtext[len] = L'\0';
-	}
-#endif
+		wtext[len - 3] = L'.';
+		wtext[len - 2] = L'.';
+		wtext[len - 1] = L'.';
+		wtext[len] = L'\0';
 	}
 	
-	gdk_draw_text_wc(pl->pl_widget.parent, font, pl->pl_widget.gc, pl->pl_widget.x, pl->pl_widget.y + line * pl->pl_fheight + font->ascent, gwtext, len);
-	g_free(gwtext);
+	gdk_draw_text_wc(pl->pl_widget.parent, font, pl->pl_widget.gc,
+			 pl->pl_widget.x,
+			 pl->pl_widget.y + line * pl->pl_fheight + font->ascent,
+			 wtext, len);
+	g_free(wtext);
 }
 
 #else /* !HAVE_WCHAR_H */
